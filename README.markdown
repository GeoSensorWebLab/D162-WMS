# Example WMS for Testbed 14

A WMS that implements the conceptual model from D160. This demonstrates that the conceptual model is portable to different mapping services and different encodings. In this case, the encoding is [CartoCSS][] that is translated into [Mapnik][] XML.

[CartoCSS]: https://github.com/mapbox/carto
[Mapnik]: https://mapnik.org

## Previewing the WMS

For testbed participants and observers, a production WMS is online at [http://testbed.gswlab.ca:3000/service](http://testbed.gswlab.ca:3000/service). This service is WMS 1.1.1 in Node.js and renders map images on-the-fly using Mapnik (no caching). It has been tested with QGIS 2/3.

Stylesheets were developed in CartoCSS and a live tile preview server ([Kosmtik][]) can be viewed at [http://testbed.gswlab.ca:7000](http://testbed.gswlab.ca:7000). This service is an OpenStreetMap-like tile service that is not a standard.

**Note**: It is no longer necessary to use "Ignore GetMap/GetTile URI reported in capabilities" in QGIS with this WMS.

[Kosmtik]: https://github.com/kosmtik/kosmtik

## Deployment to Production Server

See the production deployment instructions in [documentation/deployment.markdown](documentation/deployment.markdown).

## Development Setup with Docker

Instructions for developing the CartoCSS stylesheets using Docker are detailed in the [documentation/docker.markdown](documentation/docker.markdown) document. This is probably the easiest way to get started on Windows, where setting up dependencies can be difficult.

The instructions below on running the WMS, compiling stylesheets, and using kosmtik are explained in the Docker document.

## Development Setup (No Docker)

See the development instructions in [documentation/development.markdown](documentation/development.markdown).

### Editing the Stylesheet

Stylesheets are located in the `styles` directory. 

* CartoCSS files have the `.mss` extension
* Carto project files have the `.mml` extension
* Mapnik XML stylesheets have the `.xml` extension

The XML stylesheet is generated by combining the `mss` and `mml` files and should not be edited manually. Instead, use the compile command to generate the XML files for use by the WMS implementation:

```sh
$ node compile.js
```

To set up live refresh of the stylesheets, use [Kosmtik][] to set up a testing server. In the following examples the CartoCSS project is named `styles/nedat.mml`; for a different stylesheet, pass in the path to it instead. For Docker users, only files in the `styles` and `data` directory will have live sync enabled.

```sh
$ kosmtik serve styles/nedata.mml
```

Now editing the `nedata.mml` file or any stylesheet linked from that project file will automatically be updated by kosmtik in the browser. Adding files to the `data` directory *may* auto reload; I am not 100% sure about that and it may be necessary to refresh the browser page for kosmtik.

The WMS will automatically update the displayed map when any data in the `styles` directory is modified, excluding the Mapnik XML files. To disabled this behaviour, add `WATCH=false` as an environment variable when starting the server.

## License

Copyright University of Calgary, GeoSensorWeb Lab, 2018. All rights reserved.

(To be re-licensed for OGC Testbed in the future.)

## Authors

James Badger, University of Calgary (<jpbadger@ucalgary.ca>)  
Soroush Ojagh, University of Calgary

