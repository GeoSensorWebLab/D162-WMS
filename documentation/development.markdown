# Setting up a Development Environment

These instructions will cover installing and setting up a development environment for this WMS and stylesheets for MacOS and Linux/Unix. Windows users should try the [Docker][docker.markdown] instructions instead, unless they are comfortable with managing their own Node installations.

This app is built on Node.js and Mapnik. You *may* need to install Mapnik development libraries for your OS separately.

Start by downloading and installing the latest stable version of [Node.js][]. Then use Git to clone this repository from GitHub, or download an archive of this repository.

```sh
$ git clone https://github.com/openfirmware/D162-WMS
```

Use NPM to install the dependencies:

```sh
$ cd D162-WMS
$ npm install
```

**If** you are using MacOS >= 10.10, or Ubuntu "Trusty" or newer, then the install should work automatically.

[Node.js]: https://nodejs.org/

### If a Binary Install Doesn't Work

Other Mac/Linux users will likely have to install a C++11 compiler before node-mapnik installs.

**Windows Users** need to [download a Visual C++ redist package][vcredist].

All these users will have to install Mapnik on their system, at least version 3.0.20, and have the `mapnik-config` tool in their shell PATH.

[vcredist]: https://github.com/mapnik/node-mapnik#windows-specific

### NPM Install Works

Once the dependencies install successfully, you can start compiling stylesheets and previewing them.

To download the data sources for shapefiles:

```sh
$ node get-data.js
```

To compile all the `.mml` files in the `styles` directory into `.xml` files for mapnik:

```sh
$ node compile.js
```

To test that Mapnik will render a map to an image:

```sh
$ cd scripts
$ node test-mapnik.js
```

To start the WMS on port 3000, localhost:

```sh
$ node index.js
```

### Editing the Stylesheet

Stylesheets are located in the `styles` directory. 

* CartoCSS files have the `.mss` extension
* Carto project files have the `.mml` extension
* Mapnik XML stylesheets have the `.xml` extension

The XML stylesheet is generated by combining the `mss` and `mml` files and should not be edited manually. Instead, use the compile command to generate the XML files for use by the WMS implementation:

```sh
$ node compile.js
```

To set up live refresh of the stylesheets, use [Kosmtik][] to set up a testing server. In the following examples the CartoCSS project is named `styles/nedat.mml`; for a different stylesheet, pass in the path to it instead. For Docker users, only files in the `styles` and `data` directory will have live sync enabled.

```sh
$ kosmtik serve styles/nedata.mml
```

Now editing the `nedata.mml` file or any stylesheet linked from that project file will automatically be updated by kosmtik in the browser. Adding files to the `data` directory *may* auto reload; I am not 100% sure about that and it may be necessary to refresh the browser page for kosmtik.

The WMS will automatically update the displayed map when any data in the `styles` directory is modified, excluding the Mapnik XML files. To disabled this behaviour, add `WATCH=false` as an environment variable when starting the server.

[Kosmtik]: https://github.com/kosmtik/kosmtik

## Cloud Deployment

These instructions can also be used to deploy onto a remote or cloud virtual machine, see [deployment.markdown](deployment.markdown) for more details.
